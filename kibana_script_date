POST /_bulk
{ "index" : { "_index" : "messages", "_id" : "1" } }
{ "priority": 1, "datetime": "2019-07-17T12:13:14Z", "message": "m1" }
{ "index" : { "_index" : "messages", "_id" : "2" } }
{ "priority": 1, "datetime": "2019-07-24T01:14:59Z", "message": "m2" }
{ "index" : { "_index" : "messages", "_id" : "3" } }
{ "priority": 2, "datetime": "1983-10-14T00:36:42Z", "message": "m3" }
{ "index" : { "_index" : "messages", "_id" : "4" } }
{ "priority": 3, "datetime": "1983-10-10T02:15:15Z", "message": "m4" }
{ "index" : { "_index" : "messages", "_id" : "5" } }
{ "priority": 3, "datetime": "1983-10-10T17:18:19Z", "message": "m5" }
{ "index" : { "_index" : "messages", "_id" : "6" } }
{ "priority": 1, "datetime": "2019-08-03T17:19:31Z", "message": "m6" }
{ "index" : { "_index" : "messages", "_id" : "7" } }
{ "priority": 3, "datetime": "2019-08-04T17:20:00Z", "message": "m7" }
{ "index" : { "_index" : "messages", "_id" : "8" } }
{ "priority": 2, "datetime": "2019-08-04T18:01:01Z", "message": "m8" }
{ "index" : { "_index" : "messages", "_id" : "9" } }
{ "priority": 3, "datetime": "1983-10-10T19:00:45Z", "message": "m9" }
{ "index" : { "_index" : "messages", "_id" : "10" } }
{ "priority": 2, "datetime": "2019-07-23T23:39:54Z", "message": "m10" }


GET messages/_search


GET /messages/_search?pretty=true
{
    "aggs": {
        "day-of-week-count": {
            "terms": {
                "script": "return doc[\"datetime\"].value.getDayOfWeekEnum();"
            }
        }
    }
}

GET /messages/_search?pretty=true
{
  "query": {
    "match_all": {}
  },
  "script_fields": {
    "message_age": {
      "script": {
        "source": """
ZonedDateTime now =
ZonedDateTime.ofInstant(Instant.ofEpochMilli(params["now"]), ZoneId.of("Z")); 
ZonedDateTime mdt = doc['datetime'].value;

String age;

long years = mdt.until(now, ChronoUnit.YEARS);
age = years + 'Y';
mdt = mdt.plusYears(years);

long months = mdt.until(now, ChronoUnit.MONTHS);
age += months + 'M';
mdt = mdt.plusMonths(months);

long days = mdt.until(now, ChronoUnit.DAYS);
age += days + 'D';
//mdg = mdt.plusDays(days);

return age   
   """,
        "params": {
          "now": 1574005645830
        }
      }
    }
  }
}

GET houses/_refresh
GET houses/_count

# Скрипт возвращает статус НЕ актуальности в поле BEFORE_NOWDATE
# TRUE - дата end_date раньше даты now_date - адрес Не Актуален
# FALSE - адрес Актуален
#
# Выбираем все записи у которых дата конца (END_DATE) раньше чем текущая (NOW_DATE)
# END_DATE IS BEFORE NOW_DATE - НЕ АКТУАЛЬНЫЕ НА ТЕКУЩУЮ ДАТУ
GET houses/_search
{
  "_source": [
    "end_date",
    "region_code"
  ],
  "size": 100, 
  "query": {
    "match_all": {}
  },
  "script_fields": {
    "BEFORE_NOWDATE": {
      "script": {
        "source": """

//Получаем текущую дату из параметра в формате ISO-8601
ZonedDateTime zdt = ZonedDateTime.parse("2019-11-19T00:00:00Z");
long millisDateTime = zdt.toInstant().toEpochMilli();
ZonedDateTime nowDate =
ZonedDateTime.ofInstant(Instant.ofEpochMilli(millisDateTime), ZoneId.of("Z")); 

//Получаем end_date 
ZonedDateTime endDate =  doc['end_date'].value; 

// Сравниваем даты

          return endDate.isBefore(nowDate)
        """,
        "params": {
        "now":"2019-11-19T00:00:00Z"
      }
      }
    }
  }
}


GET houses/_search

POST _analyze
{
  "analyzer": "whitespace",
  "text":     "The quick brown fox."
}

POST _analyze
{
  "tokenizer": "standard",
  "filter":  [ "lowercase", "asciifolding" ],
  "text":      "Is this déja vu?"
}


PUT my_index
{
  "settings": {
    "analysis": {
      "analyzer": {
        "std_folded": { 
          "type": "custom",
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "asciifolding"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_text": {
        "type": "text",
        "analyzer": "std_folded" 
      }
    }
  }
}

PUT my_index
{
  "settings": {
    "analysis": {
      "analyzer": {
        "std_english": { 
          "type":      "standard",
          "stopwords": "_english_"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_text": {
        "type":     "text",
        "analyzer": "standard", 
        "fields": {
          "english": {
            "type":     "text",
            "analyzer": "std_english" 
          }
        }
      }
    }
  }
}


POST my_index/_analyze
{
  "field": "my_text",
  "text": ["The old brown cow"]
}

POST my_index/_analyze
{
  "field": "my_text.english",
  "text": ["The old brown cow"]
}

GET blog

POST blog/_analyze
{
  "field": "body"
  , "text": ["Это мой текст для теста работы аналайзера"]
}

POST blog/_search
